---
// No es necesario importar nada de Three.js aquí en el frontmatter
// si todo el código de Three.js va a estar en una etiqueta <script>
---

<div id="chair-container"></div>

<script>
  // Import Three.js from node_modules
  import * as THREE from 'three';
  import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';
  import { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader.js';

  // Wait for the DOM to be fully loaded
  document.addEventListener('DOMContentLoaded', () => {
    // 1. Seleccionar el contenedor
    const container = document.getElementById('chair-container');
    if (!container) return;

    // 2. Configuración básica de la escena, cámara y renderer
    const scene = new THREE.Scene();
    scene.background = new THREE.Color(0x111010);

    const camera = new THREE.PerspectiveCamera(
      75, 
      container.clientWidth / container.clientHeight, 
      0.1, 
      1000 
    );
    camera.position.set(0, 0, 6); // Positioned directly in front of the model

    const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
    renderer.setSize(container.clientWidth, container.clientHeight);
    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
    container.appendChild(renderer.domElement);

    // 3. Controles de Órbita permitiendo rotación completa
    const controls = new OrbitControls(camera, renderer.domElement);
    controls.enableDamping = true;
    controls.dampingFactor = 0.05;
    controls.screenSpacePanning = true; // Enable panning for better control
    controls.minDistance = 2;
    controls.maxDistance = 10;
    controls.autoRotate = true;
    controls.autoRotateSpeed = 0.5;
    
    // Remove polar angle restrictions to allow full rotation
    controls.minPolarAngle = 0; // Allow rotation to the top
    controls.maxPolarAngle = Math.PI; // Allow rotation to the bottom

    // Stop auto-rotation when user interacts with the model
    container.addEventListener('pointerdown', () => {
      controls.autoRotate = false;
    });

    let inactivityTimer: ReturnType<typeof setTimeout>; // TypeScript type for inactivityTimer
    const resetAutoRotation = () => {
      clearTimeout(inactivityTimer);
      inactivityTimer = setTimeout(() => {
        controls.autoRotate = true;
      }, 5000);
    };

    container.addEventListener('pointerup', resetAutoRotation);
    container.addEventListener('pointercancel', resetAutoRotation);
    
    // 4. Iluminación mejorada - use hemisphere light for better all-around lighting
    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);
    scene.add(ambientLight);

    // Add a hemisphere light for better top/bottom lighting
    const hemisphereLight = new THREE.HemisphereLight(0xffffff, 0x404040, 0.8);
    scene.add(hemisphereLight);

    // Add directional lights from multiple angles
    const directionalLight1 = new THREE.DirectionalLight(0xffffff, 0.8);
    directionalLight1.position.set(5, 5, 5);
    scene.add(directionalLight1);

    const directionalLight2 = new THREE.DirectionalLight(0xffffff, 0.3);
    directionalLight2.position.set(-5, -5, -5);
    scene.add(directionalLight2);

    // Create a pivot point for the model
    const pivot = new THREE.Group();
    scene.add(pivot);

    // Loading manager to track progress
    const loadingManager = new THREE.LoadingManager();
    loadingManager.onProgress = (url: string, itemsLoaded: number, itemsTotal: number) => {
      console.log(`Loading: ${itemsLoaded}/${itemsTotal} (${url})`);
    };

    // 5. Carga del modelo
    const loader = new OBJLoader(loadingManager);
    loader.load(
      '/assets/chairss.obj', 
      (object: THREE.Group) => {
        // Center the model on load
        const box = new THREE.Box3().setFromObject(object);
        const center = box.getCenter(new THREE.Vector3());
        
        // Instead of moving the object, add it to the pivot at its center
        object.position.sub(center);
        
        // Scale the model to fit the view
        const size = box.getSize(new THREE.Vector3());
        const maxDim = Math.max(size.x, size.y, size.z);
        const scale = 2.5 / maxDim; // Slightly smaller scale
        object.scale.set(scale, scale, scale);
        
        // Add the object to the pivot (which is at scene center)
        pivot.add(object);
        
        console.log('Modelo cargado:', object);
      },
      (xhr: { loaded: number; total: number }) => {
        console.log((xhr.loaded / xhr.total * 100) + '% cargado');
      }
    );

    const animate = () => {
      requestAnimationFrame(animate);
      controls.update();
      renderer.render(scene, camera);
    };

    const onWindowResize = () => {
      camera.aspect = container.clientWidth / container.clientHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(container.clientWidth, container.clientHeight);
    };
    window.addEventListener('resize', onWindowResize);

    // Start animation
    animate();
    
    // Clean up on unmount
    return () => {
      window.removeEventListener('resize', onWindowResize);
      controls.dispose();
      renderer.dispose();
    };
  });
</script>

<style is:global>
  #chair-container {
    width: 100vw;
    height: 100vh;
    position: fixed;
    background-color: transparent;
    top: 0;
    left: 0;
    z-index: 1;
  }

  canvas {
    display: block;
    cursor: grab;
    background-color: transparent;
  }

  canvas:active {
    cursor: grabbing;
  }
</style>